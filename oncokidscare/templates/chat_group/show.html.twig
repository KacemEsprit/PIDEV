{% extends 'base.html.twig' %}

{% block title %}{{ group.name }}{% endblock %}

{% block body %}
<script>
    const groupId = {{ group.id }};
</script>
<div class="container" style="max-width: 800px; margin: 2rem auto; padding: 0 1rem;">
    <div class="group-header">
        <h1>
            {% if group.isPublic %}
                <i class="fas {{ group.themeIcon }}" style="color: {{ group.themeColor }};"></i>
            {% else %}
                <i class="fas fa-lock"></i>
            {% endif %}
            {{ group.name }}
        </h1>
        
        {% if not group.isPublic %}
            <div class="member-status">
                {% if can_post_message %}
                    <span class="badge bg-success">Membre</span>
                {% else %}
                    <span class="badge bg-secondary">Non membre</span>
                {% endif %}
            </div>
        {% endif %}
    </div>

    <div class="group-description">
        <p>{{ group.description }}</p>
        {% if group.guidelines %}
            <div class="guidelines">
                <h4>Règles du groupe :</h4>
                {{ group.guidelines|nl2br }}
            </div>
        {% endif %}
    </div>

    <div class="messages-container" id="messages-container">
        {% if messages|length > 0 %}
            {% for message in messages %}
                <div class="message-wrapper {% if message.sender == app.user %}message-sent{% else %}message-received{% endif %}">
                    <div class="message">
                        <div class="message-header">
                            <div class="sender-info">
                                {% if message.sender == app.user %}
                                    <small>Vous</small>
                                {% else %}
                                    <strong>{{ message.sender.prenom }} {{ message.sender.nom }}</strong>
                                {% endif %}
                                {% if message.sender.role == 'ROLE_MEDECIN' %}
                                    <span class="badge badge-doctor">
                                        <i class="fas fa-user-md"></i> DOCTEUR
                                    </span>
                                {% endif %}
                            </div>
                            <small class="message-time">{{ message.sentAt|date('H:i') }}</small>
                        </div>
                        
                        <div class="message-bubble">
                            {% if message.type == 'voice' %}
                                <audio controls>
                                    <source src="{{ message.voiceUrl }}" type="audio/webm">
                                    Votre navigateur ne supporte pas l'audio
                                </audio>
                                <span class="duration">{{ message.duration }} sec</span>
                            {% else %}
                               <div class="message-content">  {{ message.content|nl2br }}
                               </div>
                            {% endif %}
                            
                            {% if message.sender == app.user %}
                                <div class="message-actions">
                                    {% if message.type == 'text' %}
                                        <button class="btn btn-sm btn-link edit-message" data-id="{{ message.id }}">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                    {% endif %}
                                    <form action="{{ path('app_chat_message_delete', {'id': message.id}) }}" 
                                          method="post" 
                                          class="d-inline delete-message-form"
                                          onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer ce message ?')">
                                        <button type="submit" class="btn btn-sm btn-link text-danger">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
            {% endfor %}
        {% else %}
            <div class="no-messages">
                <i class="fas fa-comments"></i>
                <p>Aucun message dans ce groupe pour le moment.</p>
                <p class="text-muted">Soyez le premier à démarrer la conversation !</p>
            </div>
        {% endif %}
    </div>

    {% if can_post_message %}
        <div class="message-form">
            {{ form_start(form) }}
            {{ form_widget(form.content, {'attr': {'rows': '3', 'placeholder': 'Votre message...'}}) }}
             <div class="input-group">
                    <button type="button" class="btn btn-secondary" id="voice-record-btn">
                        <i class="fas fa-microphone"></i>
                    </button>

            <button type="submit" class="btn btn-primary">
                <i class="fas fa-paper-plane"></i> Envoyer
            </button>
            </div>
             {{ form_widget(form.voiceUrl) }}
                {{ form_widget(form.type) }}
                {{ form_widget(form.duration) }}

            {{ form_end(form) }}

<div id="voice-recorder-container" style="display: none;">
                <div class="recording-indicator">
                    <span class="recording-time">00:00</span>
                    <div class="recording-wave"></div>
                </div>
                <button type="button" class="btn btn-danger" id="stop-recording">
                    <i class="fas fa-stop"></i> Arrêter
                </button>
            </div>


        </div>
    {% else %}
        {% if group.isPublic %}
            <div class="join-group-message">
                <p>Rejoignez le groupe pour participer aux discussions !</p>
                <form action="{{ path('app_chat_group_join', {'id': group.id}) }}" method="post" style="display: inline;">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-user-plus"></i> Rejoindre le groupe
                    </button>
                </form>
            </div>
        {% endif %}
    {% endif %}
</div>

<style>
    .recording-indicator {
    display: flex;
    align-items: center;
    margin: 10px 0;
}

.recording-time {
    font-size: 1.2em;
    margin-right: 10px;
    color: #dc3545;
}

.recording-wave {
    width: 50px;
    height: 20px;
    background: linear-gradient(#dc3545, #dc3545) no-repeat center/2px 100%;
    animation: wave 1s infinite;
}



@keyframes wave {
    0%, 100% { background-size: 2px 100%; }
    50% { background-size: 2px 50%; }
}

.voice-message audio {
    max-width: 250px;
    margin-right: 10px;
}

.voice-message .duration {
    font-size: 0.8em;
    color: #666;
}

.message-sent .duration {
    color: rgba(255, 255, 255, 0.8);
}

.alert {
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 4px;
}

.alert-success {
    background-color: #d4edda;
    border-color: #c3e6cb;
    color: #155724;
}

.alert-danger {
    background-color: #f8d7da;
    border-color: #f5c6cb;
    color: #721c24;
}

.message-actions {
    display: none;
    position: absolute;
    right: 5px;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.9);
    border-radius: 4px;
    padding: 2px;
}

.message-bubble {
    padding: 0.8rem 1rem;
    border-radius: 15px;
    position: relative;
    word-wrap: break-word;
}

.message-bubble:hover .message-actions {
    display: flex;
    gap: 5px;
}

.group-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
}

.group-header h1 {
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.group-description {
    background: #f8f9fa;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
}

.guidelines {
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #dee2e6;
}

.guidelines h4 {
    color: #495057;
    margin-bottom: 0.5rem;
}

.messages-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
    padding: 1rem;
    height: 500px;
    overflow-y: auto;
    background: #f8f9fa;
    border-radius: 12px;
    border: 1px solid #e9ecef;
}

.message-wrapper {
    display: flex;
    width: 100%;
    margin: 0.5rem 0;
}

.message-sent {
    justify-content: flex-end;
}

.message {
    max-width: 70%;
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.3rem;
    padding: 0 0.5rem;
}

.sender-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.85rem;
}

.message-time {
    font-size: 0.75rem;
    color: #6c757d;
}

.message-bubble {
    padding: 0.8rem 1rem;
    border-radius: 15px;
    position: relative;
    word-wrap: break-word;
}

.message-sent .message-bubble {
    background: #95E1D3;
    color: white;
    border-top-right-radius: 4px;
}

.message-received .message-bubble {
    background: white;
    color: #212529;
    border-top-left-radius: 4px;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.badge-doctor {
    background-color: #4a90e2;
    color: white;
    font-size: 0.7rem;
    padding: 0.25em 0.5em;
    border-radius: 0.25rem;
    display: inline-flex;
    align-items: center;
    gap: 0.2rem;
}

.message-sent .badge-doctor {
    background-color: rgba(255, 255, 255, 0.9);
    color: #4a90e2;
}

.no-messages {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    text-align: center;
    color: #6c757d;
}

.no-messages i {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: #95E1D3;
}

.message-form {
    background: white;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    margin-top: 1rem;
}

.message-form textarea {
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1rem;
    width: 100%;
    resize: none;
    margin-bottom: 1rem;
}

.message-form button {
    background: #95E1D3;
    color: white;
    border: none;
    padding: 0.8rem 1.5rem;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.message-form button:hover {
    background: #7fcec0;
}

/* Style de la scrollbar */
.messages-container::-webkit-scrollbar {
    width: 6px;
}

.messages-container::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
}

.messages-container::-webkit-scrollbar-thumb {
    background: #95E1D3;
    border-radius: 10px;
}

.messages-container::-webkit-scrollbar-thumb:hover {
    background: #7fcec0;
}

.member-status {
    margin-left: auto;
}

.badge {
    padding: 0.5rem 1rem;
    border-radius: 50px;
    font-weight: normal;
}

.join-btn {
    padding: 0.5rem 1rem;
    font-size: 1rem;
}

.sender-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.badge-doctor {
    background-color: #4a90e2;
    color: white;
    font-size: 0.75rem;
    padding: 0.35em 0.65em;
    border-radius: 0.25rem;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
}

.badge-doctor i {
    font-size: 0.8em;
}

.message-sent .badge-doctor {
    background-color: rgba(255, 255, 255, 0.9);
    color: #4a90e2;
}
</style>

<script>

function formatDuration(seconds) {
    const minutes = Math.floor(seconds / 60).toString().padStart(2, '0');
    const remainingSeconds = (seconds % 60).toString().padStart(2, '0');
    return `${minutes}:${remainingSeconds}`;
}

function formatTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('fr-FR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

document.addEventListener('DOMContentLoaded', function() {
    let mediaRecorder;
    let audioChunks = [];
    let startTime;
    let recordingTimer;
    
    const voiceRecordBtn = document.getElementById('voice-record-btn');
    const stopRecordingBtn = document.getElementById('stop-recording');
    const recorderContainer = document.getElementById('voice-recorder-container');
    const recordingTime = document.querySelector('.recording-time');
    
    voiceRecordBtn.addEventListener('click', startRecording);
    stopRecordingBtn.addEventListener('click', stopRecording);
    
    async function startRecording() {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            
            mediaRecorder.ondataavailable = (event) => {
                audioChunks.push(event.data);
            };
            
            mediaRecorder.onstop = sendVoiceMessage;
            
            audioChunks = [];
            mediaRecorder.start();
            startTime = Date.now();
            
            updateRecordingTime();
            voiceRecordBtn.style.display = 'none';
            recorderContainer.style.display = 'block';
        } catch (err) {
            console.error('Error accessing microphone:', err);
            alert('Impossible d\'accéder au microphone');
        }
    }
    
    function stopRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
            mediaRecorder.stop();
            clearInterval(recordingTimer);
        }
    }
    
    function updateRecordingTime() {
        recordingTimer = setInterval(() => {
            const duration = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(duration / 60).toString().padStart(2, '0');
            const seconds = (duration % 60).toString().padStart(2, '0');
            recordingTime.textContent = `${minutes}:${seconds}`;
        }, 1000);
    }
    
    async function sendVoiceMessage() {
        const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        const duration = Math.floor((Date.now() - startTime) / 1000);
        
        const formData = new FormData();
        formData.append('audio', audioBlob, 'voice.webm');
        formData.append('duration', duration);
        
        try {
            const response = await fetch(`/groups/${groupId}/voice-message`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });
            
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.error || 'Erreur lors de l\'envoi');
            }
            
            addVoiceMessageToChat(result);
            
            voiceRecordBtn.style.display = 'block';
            recorderContainer.style.display = 'none';
            
            // Message de confirmation
            const toast = document.createElement('div');
            toast.className = 'alert alert-success';
            toast.textContent = 'Message vocal envoyé avec succès';
            document.querySelector('.message-form').prepend(toast);
            setTimeout(() => toast.remove(), 3000);
        } catch (err) {
            console.error('Error sending voice message:', err);
            const toast = document.createElement('div');
            toast.className = 'alert alert-danger';
            toast.textContent = err.message || 'Erreur lors de l\'envoi du message vocal';
            document.querySelector('.message-form').prepend(toast);
            setTimeout(() => toast.remove(), 5000);
            
            voiceRecordBtn.style.display = 'block';
            recorderContainer.style.display = 'none';
        }
    }
    
    function addVoiceMessageToChat(message) {
        const messageContainer = document.createElement('div');
        messageContainer.className = 'message message-sent voice-message';
        messageContainer.innerHTML = `
            <div class="message-header">
                <strong>${message.sender.email}</strong>
                <small>${formatTime(message.sentAt)}</small>
            </div>
            <div class="message-content">
                <audio controls>
                    <source src="${message.voiceUrl}" type="audio/webm">
                    Votre navigateur ne supporte pas l'audio
                </audio>
                <span class="duration">${message.duration} sec</span>
            </div>
        `;
        
        document.querySelector('.messages-container').appendChild(messageContainer);
        messageContainer.scrollIntoView({ behavior: 'smooth' });
    }
});

function toggleMembersList() {
    const sidebar = document.getElementById('members-sidebar');
    sidebar.classList.toggle('active');
}

// Gestion de l'édition des messages
document.addEventListener('click', function(e) {
    if (e.target.closest('.edit-message')) {
        const messageId = e.target.closest('.edit-message').dataset.id;
        const messageDiv = e.target.closest('.message');
        const contentDiv = messageDiv.querySelector('.message-content');
        const originalContent = contentDiv.textContent.trim();
        
        // Créer le champ d'édition
        const textarea = document.createElement('textarea');
        textarea.className = 'form-control';
        textarea.value = originalContent;
        contentDiv.innerHTML = '';
        contentDiv.appendChild(textarea);
        textarea.focus();
        
        // Ajouter les boutons de sauvegarde et annulation
        const actions = document.createElement('div');
        actions.className = 'edit-actions mt-2';
        actions.innerHTML = `
            <button class="btn btn-sm btn-primary save-edit">Enregistrer</button>
            <button class="btn btn-sm btn-secondary cancel-edit">Annuler</button>
        `;
        contentDiv.appendChild(actions);
        
        // Gérer la sauvegarde
        actions.querySelector('.save-edit').addEventListener('click', async function() {
            const newContent = textarea.value.trim();
            if (newContent && newContent !== originalContent) {
                try {
                    const response = await fetch(`/groups/message/${messageId}/edit`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: `content=${encodeURIComponent(newContent)}`
                    });
                    
                    if (!response.ok) throw new Error('Erreur lors de la modification');
                    
                    contentDiv.innerHTML = newContent;
                } catch (err) {
                    alert('Erreur lors de la modification du message');
                    contentDiv.innerHTML = originalContent;
                }
            } else {
                contentDiv.innerHTML = originalContent;
            }
        });
        
        // Gérer l'annulation
        actions.querySelector('.cancel-edit').addEventListener('click', function() {
            contentDiv.innerHTML = originalContent;
        });
    }
});

</script>
{% endblock %}
